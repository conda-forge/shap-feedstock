{% set name = "shap" %}
{% set version = "0.45.0" %}

package:
  name: {{ name|lower }}
  version: {{ version }}

source:
  url: https://pypi.io/packages/source/{{ name[0] }}/{{ name }}/{{ name }}-{{ version }}.tar.gz
  sha256: be8ffc213ba3da1ce7950784571356e6ca77bee94446ddfa9c63eb2c72f7ce9e
  patches:
    - 0001-Build-for-all-CUDA-11-arches.patch  # [cuda_compiler_version == "11.8"]
    - 0001-Build-for-all-CUDA-12-arches.patch  # [(cuda_compiler_version or "").startswith("12")]
    # Taken and adapted from https://github.com/shap/shap/pull/3311
    - 0002-remove-old-kepler-architecture-for-cuda-build.patch  # [(cuda_compiler_version or "").startswith("12")]

build:
  number: 0
  skip: true  # [cuda_compiler_version == "11.2"]
  string: cuda{{ cuda_compiler_version | replace('.', '') }}py{{ CONDA_PY }}h{{ PKG_HASH }}_{{ PKG_BUILDNUM }}  # [cuda_compiler_version != "None"]
  string: cpu_py{{ CONDA_PY }}h{{ PKG_HASH }}_{{ PKG_BUILDNUM }}  # [cuda_compiler_version == "None"]
  script:
    - export NVCC_PREPEND_FLAGS="-ccbin ${CXX}"  # [unix]
    - {{ PYTHON }} -m pip install . --no-deps --ignore-installed --no-cache-dir -vvv

requirements:
  build:
    - {{ compiler('c') }}
    - {{ compiler('cxx') }}
    - {{ compiler('cuda') }}  # [cuda_compiler_version != "None"]
    - make  # [unix]
    - python                                 # [build_platform != target_platform]
    - cross-python_{{ target_platform }}     # [build_platform != target_platform]
    - numpy                                  # [build_platform != target_platform]
  host:
    - python
    - pip
    - setuptools >=61.0
    - setuptools-scm >=8.0
    - packaging >=20.9
    - numpy
    - cuda-cudart-dev   # [(cuda_compiler_version or "").startswith("12")]
  run:
    - python
    - packaging >20.9
    - numpy
    - scipy
    - scikit-learn
    - pandas
    - tqdm >=4.27.0
    - slicer ==0.0.7
    - numba
    - cloudpickle
    - __cuda  # [cuda_compiler_version != "None"]

test:
  requires:
    - pip
    - pytest
    - pytest-mpl
    - matplotlib-base
    - ipython
    - xgboost
    - tensorflow  # [osx or linux64]
    # Not available on the platforms
    - pytorch  # [not (win or ppc64le)]
    # transformers tests require pytorch
    - transformers  # [not (win or ppc64le)]
    - catboost  # [not ppc64le]
    - ngboost
    - pyod >=1
    # Fails tests/explainers/test_tree.py::test_skopt_rf_et
    # - scikit-optimize
    # Rebuild for osx-arm64?
    # - gpboost
    - lightgbm
    # Due to old pins on tensorflow, this would downgrade tensorflow massively
    # - opencv
    - sentencepiece
  source_files:
    - tests
  commands:
    - pip check
    # Skip tests for CUDA as CI doesn't have a GPU.
    - pytest -sv tests  # [cuda_compiler_version == "None"]
  imports:
    - shap
    - shap._cext
    - shap._cext_gpu  # [cuda_compiler_version != "None"]

about:
  home: https://github.com/slundberg/shap
  license: MIT
  license_family: MIT
  license_file: LICENSE
  summary: A unified approach to explain the output of any machine learning model.
  description: |
    SHAP (SHapley Additive exPlanations) is a unified approach to explain the output of any machine learning model. SHAP connects game theory with local explanations, uniting several previous methods and representing the only possible consistent and locally accurate additive feature attribution method based on expectations.
  doc_url: https://shap.readthedocs.io/en/latest/
  dev_url: https://github.com/slundberg/shap

extra:
  recipe-maintainers:
    - connortann
    - mrandrewandrade
    - primozgodec
    - slundberg
    - xhochy
